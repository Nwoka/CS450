import math
import random
import numpy as np
import pandas as pd
from matplotlib.colors import ListedColormap

def rand(a,b):
    random.uniform(a,b)
    
    
def matrix(I,J, fill = 0.0):
    
    m = []
    
    for i in range(I):
        m.append([fill*J])
        
    return m
    
def rand_matrix(matrix,a,b):
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            matrix[i][j] = rand(a,b)
            
            
def activ_function(x):
    
    y = 1/(1+e^(-x))
    return y
        
class NeuralNet:
    def __init__(self, num_input, num_output):
        self.num_input = num_input + 1
        self.num_output = num_output 
        
        
        self.a_input = [1.0]*self.num_input
        self.a_output = [1.0]*self.num_output
        
        self.weight_out = matrix(self.num_input, self.num_output)
        self.eta = 0.01
        self.epochs = 50
        
        rand_matrix(self.weight_out, -0.1,0.1)
        
    def run(self, inputs):
        for i in range(self.num_input-1):
            self.a_input[i] = inputs[i]
            
        for j in range(self.num_output):
            sum = 0.0
            for k in range(self.num_input):
                sum+=(self.a_input(k)*self.weight_out[k][j])
            self.a_output[j] = activ_function(sum)
            
        return self.a_output
    def predict(self, X):
        return np.where(self.net_input(X) >= 0.0, 1, -1)
        
    def net_input(self, X):
        return np.dot(X, self.w_[1:]) + self.w_[0]
        
    def train(self,X,y):
        self.w_ = np.zeros(1 + X.shape[1])
        self.errors_ = []

        for _ in range(self.epochs):
            errors = 0
            for xi, target in zip(X, y):
                update = self.eta * (target - self.predict(xi))
                self.w_[1:] +=  update * xi
                self.w_[0] +=  update
                errors += int(update != 0.0)
            self.errors_.append(errors)
        return self
               
        
        
        
def main():
    df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data', header=None)

    y = df.iloc[0:100, 4].values
    y = np.where(y == 'Iris-setosa', -1, 1)
    
    X = df.iloc[0:100, [0,2]].values
    
    nn = NeuralNet(2,2)
    nn.train(X,y)
   def plot_decision_regions(X, y, classifier, resolution=0.02):
   # setup marker generator and color map
   markers = ('s', 'x', 'o', '^', 'v')
   colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
   cmap = ListedColormap(colors[:len(np.unique(y))])

   # plot the decision surface
   x1_min, x1_max = X[:,  0].min() - 1, X[:, 0].max() + 1
   x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
   xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),
   np.arange(x2_min, x2_max, resolution))
   Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
   Z = Z.reshape(xx1.shape)
   plt.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)
   plt.xlim(xx1.min(), xx1.max())
   plt.ylim(xx2.min(), xx2.max())

   # plot class samples
   for idx, cl in enumerate(np.unique(y)):
      plt.scatter(x=X[y == cl, 0], y=X[y == cl, 1],
      alpha=0.8, c=cmap(idx),
      marker=markers[idx], label=cl)
    
if __name__ == "__main__":
    main()
