# -*- coding: utf-8 -*-
"""
Created on Mon Jan 23 13:57:26 2017

@author: Nwoka
"""
import numpy as np
from pprint import pprint
import random
import csv

def load_csv(self,file, split, training_set = [], test_set = []):
        with open(file,'r') as csvfile:
            lines = csv.reader(csvfile)
            dataset = list(lines)
            for x in range(len(dataset)-1):
                for y in range(4):
                    dataset[x][y] = float(dataset[x][y])
                if random.random() < split:
                    training_set.append(dataset[x])
                else:
                    test_set.append(dataset[x])

def partition(a):
    return{c: (a==c).nonzero()[0] for c in np.unique(a)}
    
    
def entropy(s):
    res = 0
    val, counts = np.unique(s,return_counts = True)
    freeq =  counts.astype('float')/len(s)
    
    for p in freeq:
        if p != 0.0:
            res-= p*np.log2(p)
            
    return res
    
    
def  information(y,x):
    
    res = entropy(y)
    
    val, counts = np.unique(x, return_counts = True)
    freqs = counts.astype('float')/len(x)
    
    
    for p, v in zip(freqs, val):
        res-= p*entropy(y[x==v])
        
    return res
    
    
def is_pure(s):
    return len(set(s))== 1
    
    
def recursive_split(x,y):
    if is_pure(y) or len(y) == 0:
        return y
        
        
    gain = np.array([information(y, x_attr) for x_attr in x.T])
    
    selected_att = np.argmax(gain)
    
    
    if np.all(gain < 1e-6):
        return y 
        
        
    sets = partition(x[:, selected_att])
    
    res = {}
    for k,v in sets. items():
        y_subset = y.take(v, axis =0 )
        
        x_subset = x.take(v,axis = 0)
        
        res["x_%d = %d"%(selected_att, k)] = recursive_split(x_subset, y_subset)
        
    return res 
        
trainingSet=[]
testSet=[]
split = 0.30
load_csv('iris.data.txt', split, trainingSet, testSet)
y = np.tile([0.0, 0.0, 0.0, 1.0, 1.0, 0.0])
#x1 = [0, 1, 1, 2, 2, 2]
#x2 = [0, 0, 1, 1, 1, 0]

x1 = trainingSet 
x2 = testSet

X = np.tile([x1,x2]).T
pprint(recursive_split(X,y))
iris = load_iris()
clf = tree.DecisionTreeClassifier()


clf = clf.fit(iris.data, iris.target)

with open("iris.dot", 'w') as f:
     f = tree.export_graphviz(clf, out_file=f)
